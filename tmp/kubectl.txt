使用Docker容器化封装应用程序的意义(好处)	
Docker引擎统一了出设施环境   docker环境	
    ·硬件的配置	
    ·操作系统的版本	
    ·运行时环境的异构	
Docker引擎统一了程序打包(装箱)方式 Docker镜像	
    ·Java程序	
    ·python程序	
    ·nodeJS程序	
Docker引擎统一了程序部署(运行)方式 docker容器	
    ·Java -jar  -> docker run ...	
    ·python manage.py runserver -> docker run ...	
    ·npm run dev -> docker run ...	

使用Docker容器化封装应用程序的缺点(坏处)
·单机使用，无法有效集群
·随着容器数量的上升，管理成本攀升
·没有有效的容灾/自愈机制
·没有预设编排模板，无法实现快速、大规模容器调度
·没有统一的配置管理中心工具
·没有容器生命周期的管理工具
·没有图形化运维管理工具


因此我们需要一套容器编排的工具!

基于Docker容器引擎的开源容器编排工具目前市场上主要有：
·docker compose、dockers warm
·Mesosphere+Marathon
·Kubernetes(K8S)


Kubernetes优势

自动装箱，水平扩展，自我修复

服务发现和负载均衡（流量调度）

自动发布(默认滚动发布模式)和回滚（蓝绿 滚动 灰度）

集中化配置管理和密钥管理

存储编排

任务批处理运行


Kubernetes概述

官网：https：//kubernetes.io
GitHub：https：//github.com/kubernetes/kubernetes

由来：谷歌的Borg系统， 后经Go语言重写并捐献给CNCF基金会开源

含义：词根源于希腊语：舵手/飞行员，K8S

重要作用：开源的容器编排框架工具(生态极其丰富)

学习的意义：解决跑裸docker的若干痛点




Kubernetes快速入门

四组基本概念

Pod/Pod控制器

Name/Namespace

Label/Label选择器

Service/Ingress



Pod

Pod是K8S里能够被运行的最小的逻辑单元(原子单元)

1个Pod里面可以运行多个容器()， 它们共享UTS+NET+IPC名称空间

可以把Pod理解成豌豆荚， 而同一Pod内的每个容器是一颗颗豌豆

一个Pod里运行多个容器， 又叫：边车(SideCar) 模式

Pod控制器

Pod控制器是Pod启动的一种模板， 用来保证在K8S里启动的Pod

应始终按照人们的预期运行(副本数、生命周期、健康状态检查...)

K8S内提供了众多的Pod控制器， 常用的有以下几种：

Deployment

Daemon Set

Replica Set

Stateful Set

Job

Cronjob


Name

由于K8S内部，使用“资源”来定义每一种逻辑概念(功能)

故每种“资源” ，都应该有自己的“名称”

“资源”有api版本(api Version) 类别(kind) 、元数据

(metadata) 、定义清单(spec) 、状态(status) 等配置信息

“名称”通常定义在“资源”的“元数据”

信息里

Namespace

随着项目增多、人员增加、集群规模的扩大，需要一种能够隔离K8S内

各种“资源”的方法，这就是名称空间

名称空间可以理解为K8S内部的虚拟集群组

不同名称空间内的“资源”

，名称可以相同，相同名称空间内的同种

“资源” “名称”不能相同

合理的使用K8S的名称空间，使得集群管理员能够更好的对交付到K8S里

的服务进行分类管理和浏览

K8S里默认存在的名称空间有：default、kube-system、kube-public

查询K8S里特定“资源”要带上相应的名称空间


Label

标签是k8s特色的管理方式，便于分类管理资源对象。

一个标签可以对应多个资源，一个资源也可以有多个标签，它们是

多对多的关系。

一个资源拥有多个标签，可以实现不同维度的管理。

标签的组成：key=value

·

与标签类似的，还有一种“注解”

(annotations)

·Label选择器

给资源打上标签后，可以使用标签选择器过滤指定的标签

标签选择器目前有两个：基于等值关系(等于、不等于)和基于集

合关系(属于、不属于、存在)

许多资源支持内嵌标签选择器字段

match Labels
match Expressions


三套网络node  pod service

Service
在K8S的世界里， 虽然每个Pod都会被分配一个单独的IP地址， 但这

个IP地址会随着Pod的销毁而消失

Service(服务) 就是用来解决这个问题的核心概念

一个Service可以看作一组提供相同服务的Pod的对外访问接口

Service作用于哪些Pod是通过标签选择器来定义的

Ingress

Ingress是K8S集群里工作在OSI网络参考模型下， 第7层的应用， 对

外暴露的接口

Service只能进行L 4流量调度， 表现形式是ip+port

Ingress则可以调度不同业务域、不同URL访问路径的业务流量



核心组件

·配置存储中心→et cd服务

·主控(master) 节点

kube-api server服务

kube-controller-manager服务

kube-scheduler服务

·运算(node) 节点

kube-kube let服务

Kube-proxy服务

CLI客户端

核心附件

kube ctl

·CNI网络插件→flannel/calico

·服务发现用插件→core dns

·服务暴露用插件→trae fik

·GUI管理插件→Dashboard



api server

提供了集群管理的REST

API接口(包括鉴权、数据

校验及集群状态变更)

负责其他模块之间的数据

交互，承担通信枢纽功能

是资源配额控制的入口

提供完备的集群安全机制




controller-manager

由一系列控制器组成，通过

·

api server监控整个集群的

状态，并确保集群处于预期

的工作状态

Node Controller

·

·

Deployment Controller

Service Controller

Volume Controller

Endpoint Controller

Garbage Controller

Namespace Controller

Job Controller

Resource qut a Controller



scheduler

主要功能是接收调度pod

到适合的运算节点上

预算策略(predict)

优选策略(priorities)


kube let

简单地说， kube let的

主要功能就是定时从某

个地方获取节点上pod

的期望状态(运行什么

容器、运行的副本数量

网络或者存储如何配

置等等)，并调用对应

的容器平台接口达到这

个状态

定时汇报当前节点的状

态给api server， 以供调

度的时候使用
镜像和容器的清理工作

保证节点上镜像不会

占满磁盘空间，退出的

容器不会占用太多资源



kube-proxy

是K8S在每个节点上运行网络

代理， service资源的载体

建立了pod网络和集群网络的

关系(cluster ip>pod ip)

常用三种流量调度模式

Userspace(废弃)

Iptables(濒临废弃)

Ipvs(推荐)

负责建立和删除包括更新调

度规则、通知api server自己

的更新， 或者从api server哪

里获取其他kube-proxy的调

度规则变化来更新自己的